name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'
  RUBY_VERSION: '2.7'

jobs:
  test-shared:
    name: Test Shared Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bootstrap packages
      run: npm run bootstrap
      
    - name: Run tests for shared package
      run: npm run test:shared -- --coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./packages/shared/coverage/lcov.info
        flags: shared
        name: shared-coverage

  test-backend:
    name: Test Backend Package
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sbdsa_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bootstrap packages
      run: npm run bootstrap
      
    - name: Run tests for backend package
      run: npm run test:backend -- --coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sbdsa_test
        REDIS_URL: redis://localhost:6379/1
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-jwt-refresh-secret
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./packages/backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  test-mobile:
    name: Test Mobile Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bootstrap packages
      run: npm run bootstrap
      
    - name: Run tests for mobile package
      run: npm run test:mobile -- --coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./packages/mobile/coverage/lcov.info
        flags: mobile
        name: mobile-coverage

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bootstrap packages
      run: npm run bootstrap
      
    - name: Run linting
      run: npm run lint

  build-android:
    name: Build Android App
    runs-on: ubuntu-latest
    needs: [test-shared, test-backend, test-mobile, lint]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bootstrap packages
      run: npm run bootstrap
      
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Cache Gradle
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Build Android APK
      run: |
        cd packages/mobile
        npm run build:android
      env:
        NODE_ENV: production
        
    - name: Upload Android APK
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: packages/mobile/android/app/build/outputs/apk/release/app-release.apk

  build-ios:
    name: Build iOS App
    runs-on: macos-latest
    needs: [test-shared, test-backend, test-mobile, lint]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bootstrap packages
      run: npm run bootstrap
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
        working-directory: packages/mobile/ios
        
    - name: Install CocoaPods
      run: |
        cd packages/mobile
        npm run pod-install
        
    - name: Build iOS App
      run: |
        cd packages/mobile
        npm run build:ios
      env:
        NODE_ENV: production
        
    - name: Upload iOS IPA
      uses: actions/upload-artifact@v3
      with:
        name: ios-ipa
        path: packages/mobile/ios/build/Build/Products/Release-iphoneos/SBD SA.ipa

  e2e-tests:
    name: End-to-End Tests
    runs-on: macos-latest
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        platform: [android, ios]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
      if: matrix.platform == 'android'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bootstrap packages
      run: npm run bootstrap
      
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      if: matrix.platform == 'android'
      
    - name: Create Android Emulator
      run: |
        echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install "system-images;android-30;google_apis;x86_64"
        echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n Pixel_4_API_30 -k "system-images;android-30;google_apis;x86_64"
        $ANDROID_HOME/emulator/emulator -avd Pixel_4_API_30 -no-audio -no-boot-anim -no-window &
        $ANDROID_HOME/platform-tools/adb wait-for-device
      if: matrix.platform == 'android'
      
    - name: Setup iOS Simulator
      run: |
        xcrun simctl create "iPhone 14" "iPhone 14"
        xcrun simctl boot "iPhone 14"
      if: matrix.platform == 'ios'
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.platform == 'android' && 'android-apk' || 'ios-ipa' }}
        path: packages/mobile/build/
        
    - name: Run E2E Tests
      run: |
        cd packages/mobile
        npm run test:e2e:${{ matrix.platform }}
      env:
        NODE_ENV: test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bootstrap packages
      run: npm run bootstrap
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-shared, test-backend, test-mobile, lint, build-android, build-ios]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bootstrap packages
      run: npm run bootstrap
      
    - name: Build backend
      run: npm run build:backend
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your deployment commands here
        # For example, deploy to a staging server or testing environment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-shared, test-backend, test-mobile, lint, build-android, build-ios, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bootstrap packages
      run: npm run bootstrap
      
    - name: Build backend
      run: npm run build:backend
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your deployment commands here
        # For example, deploy to production servers and app stores